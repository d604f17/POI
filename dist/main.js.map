{"version":3,"sources":["../main.js"],"names":["POI","latitude","longitude","value","radius","degrees","Math","PI","poi","differenceLatitude","deg2rad","differenceLongitude","a","sin","cos","c","atan2","sqrt","distance","hav_dr","newLat","acos","rLat","newLon"],"mappings":";;;;;;;;;;IAAqBA,G;AACnB,eAAYC,QAAZ,EAAsBC,SAAtB,EAAiCC,KAAjC,EAAwC;AAAA;;AACtC,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAc,IAAd,CAJsC,CAIlB;AACrB;;;;4BAEOC,O,EAAS;AACf,aAAOA,WAAWC,KAAKC,EAAL,GAAU,GAArB,CAAP;AACD;;;wCAEmBC,G,EAAK;AACvB,UAAMC,qBAAqB,KAAKC,OAAL,CAAaF,IAAIP,QAAJ,GAAe,KAAKA,QAAjC,CAA3B;AACA,UAAMU,sBAAsB,KAAKD,OAAL,CAAaF,IAAIN,SAAJ,GAAgB,KAAKA,SAAlC,CAA5B;AACA,UAAMU,IAAIN,KAAKO,GAAL,CAASJ,qBAAqB,CAA9B,IACNH,KAAKO,GAAL,CAASJ,qBAAqB,CAA9B,CADM,GAENH,KAAKQ,GAAL,CAAS,KAAKJ,OAAL,CAAa,KAAKT,QAAlB,CAAT,IACAK,KAAKQ,GAAL,CAAS,KAAKJ,OAAL,CAAaF,IAAIP,QAAjB,CAAT,CADA,GAEAK,KAAKO,GAAL,CAASF,sBAAsB,CAA/B,CAFA,GAGAL,KAAKO,GAAL,CAASF,sBAAsB,CAA/B,CALJ;AAMA,UAAMI,IAAI,IAAIT,KAAKU,KAAL,CAAWV,KAAKW,IAAL,CAAUL,CAAV,CAAX,EAAyBN,KAAKW,IAAL,CAAU,IAAIL,CAAd,CAAzB,CAAd;;AAEA,aAAO,KAAKR,MAAL,GAAcW,CAArB;AACD;;;qDAEgCG,Q,EAAU;AACzC,UAAMC,SAAS,CAAC,IAAIb,KAAKQ,GAAL,CAASI,WAAW,KAAKd,MAAzB,CAAL,IAAyC,CAAxD;AACA,UAAMgB,SAAS,CAACd,KAAKe,IAAL,CAAU,IAAI,IAAIF,MAAlB,IAA4B,KAAKT,OAAL,CAAa,KAAKT,QAAlB,CAA7B,KACV,MAAMK,KAAKC,EADD,CAAf;;AAGA,aAAOa,SAAS,KAAKnB,QAArB;AACD;;;0CAEqBiB,Q,EAAU;AAC9B,UAAMI,OAAO,KAAKZ,OAAL,CAAa,KAAKT,QAAlB,CAAb;AACA,UAAMkB,SAAS,CAAC,IAAIb,KAAKQ,GAAL,CAASI,WAAW,KAAKd,MAAzB,CAAL,IAAyC,CAAxD;AACA,UAAMmB,SAAS,CAAC,KAAKb,OAAL,CAAa,KAAKR,SAAlB,IACZI,KAAKe,IAAL,CAAU,IAAM,IAAIF,MAAL,IAAgBb,KAAKQ,GAAL,CAASQ,IAAT,IAAiBhB,KAAKQ,GAAL,CAASQ,IAAT,CAAjC,CAAf,CADW,KAEV,MAAMhB,KAAKC,EAFD,CAAf;;AAIA,aAAOgB,SAAS,KAAKrB,SAArB;AACD;;;;;;kBA1CkBF,G;AA2CpB","file":"main.js","sourcesContent":["export default class POI {\r\n  constructor(latitude, longitude, value) {\r\n    this.latitude = latitude;\r\n    this.longitude = longitude;\r\n    this.value = value;\r\n    this.radius = 6371; // radius of the earth in km\r\n  }\r\n\r\n  deg2rad(degrees) {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  getDistanceFromInKm(poi) {\r\n    const differenceLatitude = this.deg2rad(poi.latitude - this.latitude);\r\n    const differenceLongitude = this.deg2rad(poi.longitude - this.longitude);\r\n    const a = Math.sin(differenceLatitude / 2) *\r\n        Math.sin(differenceLatitude / 2) +\r\n        Math.cos(this.deg2rad(this.latitude)) *\r\n        Math.cos(this.deg2rad(poi.latitude)) *\r\n        Math.sin(differenceLongitude / 2) *\r\n        Math.sin(differenceLongitude / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    return this.radius * c;\r\n  }\r\n\r\n  getLongitudeDifferenceAtLatitude(distance) {\r\n    const hav_dr = (1 - Math.cos(distance / this.radius)) / 2;\r\n    const newLat = (Math.acos(1 - 2 * hav_dr) + this.deg2rad(this.latitude)) *\r\n        (180 / Math.PI);\r\n\r\n    return newLat - this.latitude;\r\n  }\r\n\r\n  getLatDifferenceAtLon(distance) {\r\n    const rLat = this.deg2rad(this.latitude);\r\n    const hav_dr = (1 - Math.cos(distance / this.radius)) / 2;\r\n    const newLon = (this.deg2rad(this.longitude) +\r\n        Math.acos(1 - ((2 * hav_dr) / (Math.cos(rLat) * Math.cos(rLat))))) *\r\n        (180 / Math.PI);\r\n\r\n    return newLon - this.longitude;\r\n  }\r\n};"]}